import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–†–æ—Å–°—Ç–∞—Ç –ê–Ω–∞–ª–∏—Ç–∏–∫",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E3A8A;
        text-align: center;
        margin-bottom: 1rem;
        font-weight: bold;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #2563EB;
        margin-bottom: 1rem;
    }
    .info-box {
        background-color: #EFF6FF;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 5px solid #3B82F6;
        margin-bottom: 1rem;
    }
    .stat-card {
        background-color: white;
        padding: 1.5rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        transition: transform 0.3s;
    }
    .stat-card:hover {
        transform: translateY(-5px);
    }
    .stat-value {
        font-size: 2rem;
        font-weight: bold;
        color: #1E40AF;
    }
    .stat-label {
        font-size: 1rem;
        color: #6B7280;
    }
    .footer {
        text-align: center;
        color: #6B7280;
        font-size: 0.8rem;
        margin-top: 2rem;
    }
</style>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    
    # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    regions = ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π', 
               '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω', '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
               '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π', '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π', '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å']
    
    regional_data = pd.DataFrame({
        '–†–µ–≥–∏–æ–Ω': regions,
        '–ù–∞—Å–µ–ª–µ–Ω–∏–µ': [12600000, 5400000, 1350000, 5600000, 4300000, 2800000, 3900000, 1000000,
                      3200000, 1900000, 1300000, 1500000],
        '–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞': [100000, 75000, 35000, 42000, 47000, 45000, 43000, 39000,
                            41000, 48000, 46000, 52000],
        '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏_–º–ª—Ä–¥': [3500, 1200, 90, 420, 450, 230, 380, 110,
                           350, 280, 240, 390],
        '–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è': [120, 110, 95, 105, 100, 98, 103, 97,
                              102, 104, 99, 107]
    })
    
    # –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    municipalities = []
    populations = []
    regions_list = []
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º
    for region in regions:
        if region in ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥']:
            districts = [f"{region} - –†–∞–π–æ–Ω {i}" for i in range(1, 6)]
            municipalities.extend(districts)
            populations.extend(np.random.randint(200000, 500000, len(districts)))
            regions_list.extend([region] * len(districts))
        else:
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä (–∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥)
            municipalities.append(f"{region} - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π —Ü–µ–Ω—Ç—Ä")
            populations.append(np.random.randint(300000, 1000000, 1)[0])
            regions_list.append(region)
            
            # –°—Ä–µ–¥–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
            mid_cities = [f"{region} - –ì–æ—Ä–æ–¥ {i}" for i in range(2, 5)]
            municipalities.extend(mid_cities)
            populations.extend(np.random.randint(50000, 300000, len(mid_cities)))
            regions_list.extend([region] * len(mid_cities))
            
            # –ú–∞–ª—ã–µ –≥–æ—Ä–æ–¥–∞
            small_cities = [f"{region} - –ú–∞–ª—ã–π –≥–æ—Ä–æ–¥ {i}" for i in range(1, 4)]
            municipalities.extend(small_cities)
            populations.extend(np.random.randint(10000, 50000, len(small_cities)))
            regions_list.extend([region] * len(small_cities))
    
    np.random.seed(42)
    municipal_data = pd.DataFrame({
        '–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç': municipalities,
        '–†–µ–≥–∏–æ–Ω': regions_list,
        '–ù–∞—Å–µ–ª–µ–Ω–∏–µ': populations,
        '–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞': [int(np.random.normal(35000, 15000)) for _ in range(len(municipalities))],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π': [int(pop/100 * np.random.uniform(0.8, 1.2)) for pop in populations],
        '–û–±–æ—Ä–æ—Ç_—Ä–æ–∑–Ω–∏—á–Ω–æ–π_—Ç–æ—Ä–≥–æ–≤–ª–∏_–º–ª–Ω': [int(pop/10 * np.random.uniform(0.7, 1.5)) for pop in populations],
        '–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è': np.random.randint(80, 130, len(municipalities))
    })
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–≥–∏–æ–Ω–æ–º
    for idx, row in municipal_data.iterrows():
        region_salary = regional_data[regional_data['–†–µ–≥–∏–æ–Ω'] == row['–†–µ–≥–∏–æ–Ω']]['–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞'].values[0]
        municipal_data.at[idx, '–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞'] = int(region_salary * np.random.uniform(0.7, 1.2))
    
    # –°–±–µ—Ä–ò–Ω–¥–µ–∫—Å –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è)
    sber_index = pd.DataFrame({
        '–†–µ–≥–∏–æ–Ω': regions,
        '–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': np.random.randint(90, 120, len(regions)),
        '–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_–æ–±—â–µ–ø–∏—Ç': np.random.randint(85, 125, len(regions)),
        '–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_–æ–¥–µ–∂–¥–∞': np.random.randint(80, 130, len(regions)),
        '–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_—É—Å–ª—É–≥–∏': np.random.randint(85, 115, len(regions)),
        '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫': np.random.randint(500, 3000, len(regions))
    })
    
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –¥–ª—è –°–±–µ—Ä–ò–Ω–¥–µ–∫—Å–∞
    months = pd.date_range(start='2022-01-01', periods=24, freq='M')
    sber_time_series = []
    
    for region in regions:
        base_value = np.random.randint(90, 110)
        seasonal_factor = np.sin(np.linspace(0, 2*np.pi, 12)) * 10 + 5
        seasonal_factor = np.tile(seasonal_factor, 2)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è 2 –ª–µ—Ç
        
        for i, month in enumerate(months):
            trend = i * 0.2  # –ù–µ–±–æ–ª—å—à–æ–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            random_factor = np.random.normal(0, 3)
            value = base_value + trend + seasonal_factor[i] + random_factor
            
            sber_time_series.append({
                '–†–µ–≥–∏–æ–Ω': region,
                '–î–∞—Ç–∞': month,
                '–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏': max(80, min(130, value)),
                '–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_–æ–±—â–µ–ø–∏—Ç': max(80, min(130, value + np.random.normal(0, 5))),
                '–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_–æ–¥–µ–∂–¥–∞': max(80, min(130, value + np.random.normal(0, 7))),
                '–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_—É—Å–ª—É–≥–∏': max(80, min(130, value + np.random.normal(0, 4)))
            })
    
    sber_time_series_df = pd.DataFrame(sber_time_series)
    
    return regional_data, municipal_data, sber_index, sber_time_series_df

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
regional_data, municipal_data, sber_index, sber_time_series = load_data()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown('<h1 class="main-header">–†–æ—Å–°—Ç–∞—Ç –ê–Ω–∞–ª–∏—Ç–∏–∫</h1>', unsafe_allow_html=True)
st.markdown('<p class="info-box">–ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>', unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.image("https://cdn-icons-png.flaticon.com/512/4341/4341050.png", width=100)
st.sidebar.markdown("## –ù–∞–≤–∏–≥–∞—Ü–∏—è")

# –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", 
                       ["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                        "–°–±–µ—Ä–ò–Ω–¥–µ–∫—Å", "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ì–æ—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã", "–ò–ò-–ê–≥–µ–Ω—Ç"])

# –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö
if page == "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":
    st.markdown('<h2 class="sub-header">–û–±–∑–æ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h2>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown('<div class="stat-card">', unsafe_allow_html=True)
        st.markdown(f'<p class="stat-value">{len(regional_data)}</p>', unsafe_allow_html=True)
        st.markdown('<p class="stat-label">–†–µ–≥–∏–æ–Ω–æ–≤ –≤ –±–∞–∑–µ</p>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="stat-card">', unsafe_allow_html=True)
        st.markdown(f'<p class="stat-value">{len(municipal_data)}</p>', unsafe_allow_html=True)
        st.markdown('<p class="stat-label">–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ –≤ –±–∞–∑–µ</p>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="stat-card">', unsafe_allow_html=True)
        st.markdown(f'<p class="stat-value">{len(sber_time_series["–†–µ–≥–∏–æ–Ω"].unique())}</p>', unsafe_allow_html=True)
        st.markdown('<p class="stat-label">–†–µ–≥–∏–æ–Ω–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –°–±–µ—Ä–ò–Ω–¥–µ–∫—Å</p>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown("### –ü—Ä–∏–º–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    tab1, tab2, tab3 = st.tabs(["–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–°–±–µ—Ä–ò–Ω–¥–µ–∫—Å"])
    
    with tab1:
        st.dataframe(regional_data)
    
    with tab2:
        st.dataframe(municipal_data)
    
    with tab3:
        st.dataframe(sber_index)
    
    st.markdown("### –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("""
    –í –Ω–∞—à–µ–π –±–∞–∑–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:
    
    1. **–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**:
       - –ù–∞—Å–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤
       - –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞
       - –û–±—ä–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
       - –ò–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
    
    2. **–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ**:
       - –ù–∞—Å–µ–ª–µ–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤
       - –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞
       - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
       - –û–±–æ—Ä–æ—Ç —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
       - –ò–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
    
    3. **–î–∞–Ω–Ω—ã–µ –°–±–µ—Ä–ò–Ω–¥–µ–∫—Å**:
       - –ò–Ω–¥–µ–∫—Å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
       - –ò–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å—Ñ–µ—Ä–µ –æ–±—â–µ–ø–∏—Ç–∞
       - –ò–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å—Ñ–µ—Ä–µ –æ–¥–µ–∂–¥—ã
       - –ò–Ω–¥–µ–∫—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å—Ñ–µ—Ä–µ —É—Å–ª—É–≥
       - –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
    """)

# –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
elif page == "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
    st.markdown('<h2 class="sub-header">–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>', unsafe_allow_html=True)
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.sidebar.markdown("### –§–∏–ª—å—Ç—Ä—ã")
    selected_regions = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã:", 
                                             options=regional_data['–†–µ–≥–∏–æ–Ω'].unique(),
                                             default=regional_data['–†–µ–≥–∏–æ–Ω'].unique()[:5])
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    filtered_regional_data = regional_data[regional_data['–†–µ–≥–∏–æ–Ω'].isin(selected_regions)]
    
    # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    metric = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 
                         ["–ù–∞—Å–µ–ª–µ–Ω–∏–µ", "–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏_–º–ª—Ä–¥", "–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"])
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.markdown("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤")
    
    fig = px.bar(filtered_regional_data, x='–†–µ–≥–∏–æ–Ω', y=metric, 
                color='–†–µ–≥–∏–æ–Ω', text_auto='.2s',
                title=f"{metric} –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    fig.update_layout(height=500)
    st.plotly_chart(fig, use_container_width=True)
    
    # –ö–∞—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞, —Ç.–∫. –Ω–µ—Ç –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö)
    st.markdown("### –ö–∞—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤")
    st.info("–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –≥–µ–æ–¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–æ–≤. –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –∫–∞—Ä—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    st.markdown("### –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(filtered_regional_data)
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
      # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    st.markdown("### –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
    
    numeric_cols = ['–ù–∞—Å–µ–ª–µ–Ω–∏–µ', '–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏_–º–ª—Ä–¥', '–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è']
    corr_matrix = filtered_regional_data[numeric_cols].corr()
    
    fig = px.imshow(corr_matrix, text_auto=True, color_continuous_scale='RdBu_r',
                   title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏")
    st.plotly_chart(fig, use_container_width=True)

# –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
elif page == "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
    st.markdown('<h2 class="sub-header">–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>', unsafe_allow_html=True)
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.sidebar.markdown("### –§–∏–ª—å—Ç—Ä—ã")
    selected_region = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", 
                                         options=sorted(municipal_data['–†–µ–≥–∏–æ–Ω'].unique()))
    
    population_filter = st.sidebar.slider("–ù–∞—Å–µ–ª–µ–Ω–∏–µ (—Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫):", 
                                        min_value=0, 
                                        max_value=int(municipal_data['–ù–∞—Å–µ–ª–µ–Ω–∏–µ'].max()/1000), 
                                        value=(0, int(municipal_data['–ù–∞—Å–µ–ª–µ–Ω–∏–µ'].max()/1000)))
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    filtered_municipal_data = municipal_data[
        (municipal_data['–†–µ–≥–∏–æ–Ω'] == selected_region) & 
        (municipal_data['–ù–∞—Å–µ–ª–µ–Ω–∏–µ'] >= population_filter[0]*1000) & 
        (municipal_data['–ù–∞—Å–µ–ª–µ–Ω–∏–µ'] <= population_filter[1]*1000)
    ]
    
    # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    metric = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 
                         ["–ù–∞—Å–µ–ª–µ–Ω–∏–µ", "–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π", 
                          "–û–±–æ—Ä–æ—Ç_—Ä–æ–∑–Ω–∏—á–Ω–æ–π_—Ç–æ—Ä–≥–æ–≤–ª–∏_–º–ª–Ω", "–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"])
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.markdown("### –ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç—ã —Ä–µ–≥–∏–æ–Ω–∞")
    
    if len(filtered_municipal_data) > 0:
        fig = px.bar(filtered_municipal_data, x='–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç', y=metric, 
                    color='–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç', text_auto='.2s',
                    title=f"{metric} –ø–æ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞–º {selected_region}")
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.markdown("### –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.dataframe(filtered_municipal_data)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–º–µ—Ä—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
        st.markdown("### –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–º–µ—Ä—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é
        def population_category(population):
            if population < 50000:
                return "–ú–∞–ª—ã–π –≥–æ—Ä–æ–¥ (–¥–æ 50 —Ç—ã—Å.)"
            elif population < 100000:
                return "–°—Ä–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥ (50-100 —Ç—ã—Å.)"
            elif population < 250000:
                return "–ë–æ–ª—å—à–æ–π –≥–æ—Ä–æ–¥ (100-250 —Ç—ã—Å.)"
            elif population < 1000000:
                return "–ö—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ (250 —Ç—ã—Å.-1 –º–ª–Ω.)"
            else:
                return "–ú–µ–≥–∞–ø–æ–ª–∏—Å (–±–æ–ª–µ–µ 1 –º–ª–Ω.)"
        
        filtered_municipal_data['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] = filtered_municipal_data['–ù–∞—Å–µ–ª–µ–Ω–∏–µ'].apply(population_category)
        
        fig = px.box(filtered_municipal_data, x='–ö–∞—Ç–µ–≥–æ—Ä–∏—è', y='–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞',
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

# –°–±–µ—Ä–ò–Ω–¥–µ–∫—Å
elif page == "–°–±–µ—Ä–ò–Ω–¥–µ–∫—Å":
    st.markdown('<h2 class="sub-header">–î–∞–Ω–Ω—ã–µ –°–±–µ—Ä–ò–Ω–¥–µ–∫—Å</h2>', unsafe_allow_html=True)
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.sidebar.markdown("### –§–∏–ª—å—Ç—Ä—ã")
    selected_regions = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã:", 
                                             options=sber_index['–†–µ–≥–∏–æ–Ω'].unique(),
                                             default=sber_index['–†–µ–≥–∏–æ–Ω'].unique()[:3])
    
    date_range = st.sidebar.date_input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        value=(sber_time_series['–î–∞—Ç–∞'].min().date(), sber_time_series['–î–∞—Ç–∞'].max().date()),
        min_value=sber_time_series['–î–∞—Ç–∞'].min().date(),
        max_value=sber_time_series['–î–∞—Ç–∞'].max().date()
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    filtered_sber_index = sber_index[sber_index['–†–µ–≥–∏–æ–Ω'].isin(selected_regions)]
    
    filtered_time_series = sber_time_series[
        (sber_time_series['–†–µ–≥–∏–æ–Ω'].isin(selected_regions)) &
        (sber_time_series['–î–∞—Ç–∞'] >= pd.Timestamp(date_range[0])) &
        (sber_time_series['–î–∞—Ç–∞'] <= pd.Timestamp(date_range[1]))
    ]
    
    # –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    metric = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", 
                         ["–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_–æ–±—â–µ–ø–∏—Ç", 
                          "–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_–æ–¥–µ–∂–¥–∞", "–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_—É—Å–ª—É–≥–∏", "–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫"])
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.markdown("### –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –°–±–µ—Ä–ò–Ω–¥–µ–∫—Å")
    
    if len(filtered_time_series) > 0:
        fig = px.line(filtered_time_series, x='–î–∞—Ç–∞', y=metric, color='–†–µ–≥–∏–æ–Ω',
                     title=f"–î–∏–Ω–∞–º–∏–∫–∞ {metric} –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        st.markdown("### –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
        
        latest_data = filtered_sber_index.copy()
        fig = px.bar(latest_data, x='–†–µ–≥–∏–æ–Ω', y=metric, color='–†–µ–≥–∏–æ–Ω',
                    title=f"–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è {metric} –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
        st.plotly_chart(fig, use_container_width=True)
        
        # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
        st.markdown("### –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
        filtered_time_series['–ú–µ—Å—è—Ü'] = filtered_time_series['–î–∞—Ç–∞'].dt.month_name()
        monthly_avg = filtered_time_series.groupby(['–†–µ–≥–∏–æ–Ω', '–ú–µ—Å—è—Ü'])['–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'].mean().reset_index()
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Å—è—Ü–µ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        month_order = ['January', 'February', 'March', 'April', 'May', 'June', 
                       'July', 'August', 'September', 'October', 'November', 'December']
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Å—è—Ü–µ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        month_order = ['January', 'February', 'March', 'April', 'May', 'June', 
                       'July', 'August', 'September', 'October', 'November', 'December']
        monthly_avg['–ú–µ—Å—è—Ü'] = pd.Categorical(monthly_avg['–ú–µ—Å—è—Ü'], categories=month_order, ordered=True)
        monthly_avg = monthly_avg.sort_values('–ú–µ—Å—è—Ü')
        
        fig = px.line(monthly_avg, x='–ú–µ—Å—è—Ü', y='–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='–†–µ–≥–∏–æ–Ω',
                     title="–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", markers=True)
        st.plotly_chart(fig, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.markdown("### –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.dataframe(filtered_time_series)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")

# –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
elif page == "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
    st.markdown('<h2 class="sub-header">–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h2>', unsafe_allow_html=True)
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
    analysis_type = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:", 
                            ["–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤", 
                             "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"])
    
    if analysis_type == "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤":
        # –§–∏–ª—å—Ç—Ä—ã
        st.sidebar.markdown("### –§–∏–ª—å—Ç—Ä—ã")
        selected_regions = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", 
                                                options=regional_data['–†–µ–≥–∏–æ–Ω'].unique(),
                                                default=regional_data['–†–µ–≥–∏–æ–Ω'].unique()[:5])
        
        metrics = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", 
                               ["–ù–∞—Å–µ–ª–µ–Ω–∏–µ", "–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏_–º–ª—Ä–¥", "–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"],
                               default=["–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞", "–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"])
        
        if selected_regions and metrics:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            filtered_data = regional_data[regional_data['–†–µ–≥–∏–æ–Ω'].isin(selected_regions)]
            
            # –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
            st.markdown("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
            radar_data = filtered_data.copy()
            for metric in metrics:
                max_val = radar_data[metric].max()
                radar_data[f"{metric}_norm"] = radar_data[metric] / max_val * 100
            
            fig = go.Figure()
            
            for _, region in radar_data.iterrows():
                fig.add_trace(go.Scatterpolar(
                    r=[region[f"{metric}_norm"] for metric in metrics],
                    theta=metrics,
                    fill='toself',
                    name=region['–†–µ–≥–∏–æ–Ω']
                ))
            
            fig.update_layout(
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, 100]
                    )),
                showlegend=True,
                title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            st.markdown("### –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            st.dataframe(filtered_data[['–†–µ–≥–∏–æ–Ω'] + metrics])
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            st.markdown("### –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º")
            
            for metric in metrics:
                fig = px.bar(filtered_data, x='–†–µ–≥–∏–æ–Ω', y=metric, color='–†–µ–≥–∏–æ–Ω',
                           title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é: {metric}")
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
    
    elif analysis_type == "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤":
        # –§–∏–ª—å—Ç—Ä—ã
        st.sidebar.markdown("### –§–∏–ª—å—Ç—Ä—ã")
        selected_region = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:", 
                                             options=sorted(municipal_data['–†–µ–≥–∏–æ–Ω'].unique()))
        
        municipalities_in_region = municipal_data[municipal_data['–†–µ–≥–∏–æ–Ω'] == selected_region]['–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç'].unique()
        selected_municipalities = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", 
                                                      options=municipalities_in_region,
                                                      default=municipalities_in_region[:min(5, len(municipalities_in_region))])
        
        metrics = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", 
                               ["–ù–∞—Å–µ–ª–µ–Ω–∏–µ", "–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π", 
                                "–û–±–æ—Ä–æ—Ç_—Ä–æ–∑–Ω–∏—á–Ω–æ–π_—Ç–æ—Ä–≥–æ–≤–ª–∏_–º–ª–Ω", "–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"],
                               default=["–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞", "–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"])
        
        if selected_municipalities and metrics:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            filtered_data = municipal_data[municipal_data['–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç'].isin(selected_municipalities)]
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            st.markdown("### –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º")
            
            for metric in metrics:
                fig = px.bar(filtered_data, x='–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç', y=metric, color='–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç',
                           title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é: {metric}")
                st.plotly_chart(fig, use_container_width=True)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            st.markdown("### –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            st.dataframe(filtered_data[['–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç'] + metrics])
            
            # –†–∞—Å—á–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            st.markdown("### –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            
            if "–ù–∞—Å–µ–ª–µ–Ω–∏–µ" in filtered_data.columns and "–û–±–æ—Ä–æ—Ç_—Ä–æ–∑–Ω–∏—á–Ω–æ–π_—Ç–æ—Ä–≥–æ–≤–ª–∏_–º–ª–Ω" in filtered_data.columns:
                filtered_data['–û–±–æ—Ä–æ—Ç_–Ω–∞_–¥—É—à—É_–Ω–∞—Å–µ–ª–µ–Ω–∏—è'] = filtered_data['–û–±–æ—Ä–æ—Ç_—Ä–æ–∑–Ω–∏—á–Ω–æ–π_—Ç–æ—Ä–≥–æ–≤–ª–∏_–º–ª–Ω'] * 1000000 / filtered_data['–ù–∞—Å–µ–ª–µ–Ω–∏–µ']
                
                fig = px.bar(filtered_data, x='–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç', y='–û–±–æ—Ä–æ—Ç_–Ω–∞_–¥—É—à—É_–Ω–∞—Å–µ–ª–µ–Ω–∏—è', color='–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç',
                           title="–û–±–æ—Ä–æ—Ç —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è (—Ä—É–±.)")
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç—ã –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
    
    elif analysis_type == "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        # –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        data_source = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:", 
                                 ["–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"])
    elif analysis_type == "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        # –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        data_source = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:", 
                                 ["–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–°–±–µ—Ä–ò–Ω–¥–µ–∫—Å"])
        
        if data_source == "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
            data = regional_data
            numeric_cols = ['–ù–∞—Å–µ–ª–µ–Ω–∏–µ', '–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏_–º–ª—Ä–¥', '–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è']
        elif data_source == "–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
            data = municipal_data
            numeric_cols = ['–ù–∞—Å–µ–ª–µ–Ω–∏–µ', '–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π', 
                           '–û–±–æ—Ä–æ—Ç_—Ä–æ–∑–Ω–∏—á–Ω–æ–π_—Ç–æ—Ä–≥–æ–≤–ª–∏_–º–ª–Ω', '–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è']
        else:  # –°–±–µ—Ä–ò–Ω–¥–µ–∫—Å
            data = sber_index
            numeric_cols = ['–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_–æ–±—â–µ–ø–∏—Ç', 
                           '–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_–æ–¥–µ–∂–¥–∞', '–ò–Ω–¥–µ–∫—Å_—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π_—É—Å–ª—É–≥–∏', '–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫']
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        st.markdown("### –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
        
        corr_matrix = data[numeric_cols].corr()
        
        fig = px.imshow(corr_matrix, text_auto=True, color_continuous_scale='RdBu_r',
                       title=f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ ({data_source})")
        st.plotly_chart(fig, use_container_width=True)
        
        # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å–µ—è–Ω–∏—è
        st.markdown("### –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è")
        
        x_metric = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –æ—Å–∏ X:", numeric_cols)
        y_metric = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –æ—Å–∏ Y:", 
                              [col for col in numeric_cols if col != x_metric], 
                              index=min(1, len(numeric_cols)-1))
        
        if data_source == "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" or data_source == "–°–±–µ—Ä–ò–Ω–¥–µ–∫—Å":
            color_by = '–†–µ–≥–∏–æ–Ω'
        else:
            color_by = '–†–µ–≥–∏–æ–Ω'
        
        fig = px.scatter(data, x=x_metric, y=y_metric, color=color_by,
                        hover_name=data.columns[0],  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–†–µ–≥–∏–æ–Ω –∏–ª–∏ –ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç)
                        title=f"–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {y_metric} –æ—Ç {x_metric}",
                        trendline="ols")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        correlation = data[x_metric].corr(data[y_metric])
        st.markdown(f"**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞:** {correlation:.3f}")
        
        if abs(correlation) < 0.3:
            st.markdown("–°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.")
        elif abs(correlation) < 0.7:
            st.markdown("–£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.")
        else:
            st.markdown("–°–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.")

# –ì–æ—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
elif page == "–ì–æ—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã":
    st.markdown('<h2 class="sub-header">–ì–æ—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã</h2>', unsafe_allow_html=True)
    
    report_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", 
                             ["–¢–æ–ø-10 –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç–µ", 
                              "–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
                              "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–æ–≤",
                              "–ú–∞–ª—ã–µ –≥–æ—Ä–æ–¥–∞ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —Ä–∞–∑–≤–∏—Ç–∏—è"])
    
    if report_type == "–¢–æ–ø-10 –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç–µ":
        st.markdown("### –¢–æ–ø-10 –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç–µ")
        
        # –§–∏–ª—å—Ç—Ä—ã
        population_threshold = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ (—Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫):", 
                                       min_value=10, max_value=1000, value=100, step=10)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        filtered_data = municipal_data[municipal_data['–ù–∞—Å–µ–ª–µ–Ω–∏–µ'] <= population_threshold * 1000]
        top_municipalities = filtered_data.sort_values('–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞', ascending=False).head(10)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        fig = px.bar(top_municipalities, x='–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç', y='–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞', 
                    color='–†–µ–≥–∏–æ–Ω', text_auto='.2s',
                    title=f"–¢–æ–ø-10 –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –¥–æ {population_threshold} —Ç—ã—Å. —á–µ–ª–æ–≤–µ–∫ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç–µ")
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.markdown("### –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.dataframe(top_municipalities[['–ú—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç', '–†–µ–≥–∏–æ–Ω', '–ù–∞—Å–µ–ª–µ–Ω–∏–µ', '–°—Ä–µ–¥–Ω—è—è_–∑–∞—Ä–ø–ª–∞—Ç–∞', 
                                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π', '–û–±–æ—Ä–æ—Ç_—Ä–æ–∑–Ω–∏—á–Ω–æ–π_—Ç–æ—Ä–≥–æ–≤–ª–∏_–º–ª–Ω']])
        
        # –ê–Ω–∞–ª–∏–∑
        st.markdown("### –ê–Ω–∞–ª–∏–∑")
        st.markdown("""
        –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Å—Ä–µ–¥–∏ –º–∞–ª—ã—Ö –∏ —Å—Ä–µ–¥–Ω–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –¥–æ 100 —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫ 
        –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –≤ –º—É–Ω–∏—Ü–∏–ø–∞–ª–∏—Ç–µ—Ç–∞—Ö, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö —Å —Ä–∞–∑–≤–∏—Ç–æ–π 
        –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å—é –∏–ª–∏ –¥–æ–±—ã—á–µ–π –ø–æ–ª–µ–∑–Ω—ã—Ö –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö. –¢–∞–∫–∂–µ –≤—ã—Å–æ–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è 
        –≥–æ—Ä–æ–¥–æ–≤-—Å–ø—É—Ç–Ω–∏–∫–æ–≤ –∫—Ä—É–ø–Ω—ã—Ö –º–µ–≥–∞–ø–æ–ª–∏—Å–æ–≤.
        
        –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç –≤ –º–∞–ª—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö:
        - –ù–∞–ª–∏—á–∏–µ –∫—Ä—É–ø–Ω—ã—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–π
        - –ë–ª–∏–∑–æ—Å—Ç—å –∫ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ü–µ–Ω—Ç—Ä–∞–º
        - –†–∞–∑–≤–∏—Ç–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π
        - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ–≥–∏–æ–Ω–µ
        """)
    
    elif report_type == "–ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º":
        st.markdown("### –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        regions_to_show = sber_index.sort_values('–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', ascending=False)['–†–µ–≥–∏–æ–Ω'].head(5).tolist()
        
        filtered_time_series = sber_time_series[sber_time_series['–†–µ–≥–∏–æ–Ω'].isin(regions_to_show)]
        
        fig = px.line(filtered_time_series, x='–î–∞—Ç–∞', y='–ò–Ω–¥–µ–∫—Å_–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='–†–µ–≥–∏–æ–Ω',
                     title="–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–æ–ø-5 —Ä–µ–≥–∏–æ–Ω–∞—Ö")
        fig.update_layout(height=500)
        st.plotly_chart(fig, use_container_width=True)
        
elif page == "–ò–ò-–ê–≥–µ–Ω—Ç":
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
    st.title("–ò–ò-–ê–≥–µ–Ω—Ç")

    for msg in st.session_state.chat_history:
        st.write(f"üë§ {msg}")

    user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", key="chat_input", placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...")

    if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
        if user_input.strip():
            st.session_state.chat_history.append(user_input)
            st.rerun()  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
